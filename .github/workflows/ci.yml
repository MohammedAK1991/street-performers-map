name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Test and lint shared types
  shared-types:
    name: 'Shared Types: Test & Build'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared types
        run: pnpm --filter @spm/shared-types build

      - name: Type check shared types
        run: pnpm --filter @spm/shared-types type-check

  # Backend tests and checks
  backend:
    name: 'Backend: Test, Lint & Build'
    runs-on: ubuntu-latest
    needs: shared-types
    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.hello().isWritablePrimary || db.hello().secondary' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared types (dependency)
        run: pnpm --filter @spm/shared-types build

      - name: Lint backend
        run: pnpm --filter @spm/backend lint

      - name: Type check backend
        run: pnpm --filter @spm/backend type-check

      - name: Run backend tests
        run: pnpm --filter @spm/backend test
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://test:test@localhost:27017/test?authSource=admin
          JWT_SECRET: test-secret-key
          STRIPE_SECRET_KEY: sk_test_mock_key

      - name: Build backend
        run: pnpm --filter @spm/backend build

  # Frontend tests and build
  frontend:
    name: 'Frontend: Test, Lint & Build'
    runs-on: ubuntu-latest
    needs: shared-types
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared types (dependency)
        run: pnpm --filter @spm/shared-types build

      - name: Lint frontend
        run: pnpm --filter @spm/frontend lint

      - name: Type check frontend
        run: pnpm --filter @spm/frontend type-check

      - name: Run frontend tests
        run: pnpm --filter @spm/frontend test
        env:
          NODE_ENV: test

      - name: Build frontend
        run: pnpm --filter @spm/frontend build
        env:
          VITE_API_URL: https://api.streetperformersmap.com/api/v1
          VITE_WS_URL: wss://api.streetperformersmap.com
          VITE_CLERK_PUBLISHABLE_KEY: pk_test_mock_key
          VITE_STRIPE_PUBLISHABLE_KEY: pk_test_mock_key

  # Security and dependency checks
  security:
    name: 'Security & Dependency Audit'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: Check for outdated dependencies
        run: pnpm outdated
        continue-on-error: true

  # Code quality and coverage
  quality:
    name: 'Code Quality & Coverage'
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for SonarCloud

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared types
        run: pnpm --filter @spm/shared-types build

      - name: Run backend tests with coverage
        run: pnpm --filter @spm/backend test:coverage
        env:
          NODE_ENV: test
          JWT_SECRET: test-secret-key
          STRIPE_SECRET_KEY: sk_test_mock_key

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./apps/backend/coverage/
          flags: backend
          name: backend-coverage

      # Uncomment to enable SonarCloud analysis
      # - name: SonarCloud Scan
      #   uses: SonarSource/sonarcloud-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # E2E tests (runs on main branch only)
  e2e:
    name: 'End-to-End Tests'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [backend, frontend]
    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all packages
        run: pnpm build

      - name: Start backend server
        run: pnpm --filter @spm/backend start &
        env:
          NODE_ENV: test
          PORT: 3001
          MONGODB_URI: mongodb://localhost:27017/test
          JWT_SECRET: test-secret-key

      - name: Wait for backend to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'

      - name: Start frontend server
        run: pnpm --filter @spm/frontend preview --port 3000 &
        env:
          VITE_API_URL: http://localhost:3001/api/v1

      - name: Wait for frontend to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run Playwright E2E tests
        run: |
          # Install Playwright browsers
          npx playwright install
          # Run E2E tests
          npx playwright test
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:3001

  # Notify on completion
  notify:
    name: 'Notify Results'
    runs-on: ubuntu-latest
    if: always()
    needs: [shared-types, backend, frontend, security, quality]
    steps:
      - name: Notify success
        if: ${{ needs.backend.result == 'success' && needs.frontend.result == 'success' }}
        run: echo "✅ All CI checks passed successfully!"

      - name: Notify failure
        if: ${{ needs.backend.result == 'failure' || needs.frontend.result == 'failure' }}
        run: |
          echo "❌ CI pipeline failed!"
          exit 1
